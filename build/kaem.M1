
# Core program
# Defining function strcpy
:FUNCTION_strcpy
# Defining local i
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#i
:WHILE_strcpy_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_strcpy_0
# THEN_while_strcpy_0
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_strcpy_0
:END_WHILE_strcpy_0
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _return_result_locals
RETURN
# Defining function strncpy
:FUNCTION_strncpy
# IF_strncpy_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_strncpy_0
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
RETURN
JUMP %_END_IF_strncpy_0
:ELSE_strncpy_0
:_END_IF_strncpy_0
# Defining local i
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#i
:WHILE_strncpy_1
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_strncpy_1
# THEN_while_strncpy_1
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_strncpy_2
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_strncpy_2
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_strncpy_2
:ELSE_strncpy_2
:_END_IF_strncpy_2
JUMP %WHILE_strncpy_1
:END_WHILE_strncpy_1
:WHILE_strncpy_3
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETBE
MOVEZX
TEST
JUMP_EQ %END_WHILE_strncpy_3
# THEN_while_strncpy_3
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_strncpy_3
:END_WHILE_strncpy_3
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _return_result_locals
RETURN
# Defining function strcat
:FUNCTION_strcat
# Defining local i
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#i
# Defining local j
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#j
:WHILE_strcat_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_strcat_0
# THEN_while_strcat_0
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_strcat_0
:END_WHILE_strcat_0
:WHILE_strcat_1
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_strcat_1
# THEN_while_strcat_1
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_strcat_1
:END_WHILE_strcat_1
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
# Defining function strncat
:FUNCTION_strncat
# Defining local i
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#i
# Defining local j
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#j
:WHILE_strncat_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_strncat_0
# THEN_while_strncat_0
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_strncat_0
:END_WHILE_strncat_0
:WHILE_strncat_1
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_strncat_1
# THEN_while_strncat_1
# IF_strncat_2
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_strncat_2
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_strncat_2
:ELSE_strncat_2
:_END_IF_strncat_2
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-48
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_strncat_1
:END_WHILE_strncat_1
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
# Defining function strlen
:FUNCTION_strlen
# Defining local i
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#i
:WHILE_strlen_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_strlen_0
# THEN_while_strlen_0
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_strlen_0
:END_WHILE_strlen_0
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _return_result_locals
RETURN
# Defining function strnlen_s
:FUNCTION_strnlen_s
# Defining local i
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#i
:WHILE_strnlen_s_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_strnlen_s_0
# THEN_while_strnlen_s_0
# IF_strnlen_s_1
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_strnlen_s_1
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_strnlen_s_1
:ELSE_strnlen_s_1
:_END_IF_strnlen_s_1
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_strnlen_s_0
:END_WHILE_strnlen_s_0
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _return_result_locals
RETURN
# Defining function strcmp
:FUNCTION_strcmp
# Defining local i
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#i
:WHILE_strcmp_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_strcmp_0
# THEN_while_strcmp_0
# IF_strcmp_1
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %ELSE_strcmp_1
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_strcmp_1
:ELSE_strcmp_1
:_END_IF_strcmp_1
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_strcmp_0
:END_WHILE_strcmp_0
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
POP_RBX	# _return_result_locals
RETURN
# Defining function strncmp
:FUNCTION_strncmp
# Defining local i
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#i
:WHILE_strncmp_0
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETA
MOVEZX
TEST
JUMP_EQ %END_WHILE_strncmp_0
# THEN_while_strncmp_0
# IF_strncmp_1
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_strncmp_1
JUMP %END_WHILE_strncmp_0
JUMP %_END_IF_strncmp_1
:ELSE_strncmp_1
:_END_IF_strncmp_1
# IF_strncmp_2
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %ELSE_strncmp_2
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_strncmp_2
:ELSE_strncmp_2
:_END_IF_strncmp_2
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_strncmp_0
:END_WHILE_strncmp_0
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
RETURN
# Defining function strchr
:FUNCTION_strchr
# Defining local p
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#p
:WHILE_strchr_0
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_strchr_0
# THEN_while_strchr_0
# IF_strchr_1
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_strchr_1
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_strchr_1
:ELSE_strchr_1
:_END_IF_strchr_1
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_strchr_0
:END_WHILE_strchr_0
# IF_strchr_2
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_strchr_2
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_strchr_2
:ELSE_strchr_2
:_END_IF_strchr_2
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _return_result_locals
RETURN
# Defining function strrchr
:FUNCTION_strrchr
# Defining local p
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#p
# Defining local i
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#i
:WHILE_strrchr_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_strrchr_0
# THEN_while_strrchr_0
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_strrchr_0
:END_WHILE_strrchr_0
:WHILE_strrchr_1
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_strrchr_1
# THEN_while_strrchr_1
# IF_strrchr_2
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_strrchr_2
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_strrchr_2
:ELSE_strrchr_2
:_END_IF_strrchr_2
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_strrchr_1
:END_WHILE_strrchr_1
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
# Defining function strspn
:FUNCTION_strspn
# IF_strspn_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_strspn_0
LOAD_IMMEDIATE_rax %0
RETURN
JUMP %_END_IF_strspn_0
:ELSE_strspn_0
:_END_IF_strspn_0
# Defining local i
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#i
:WHILE_strspn_1
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strchr
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_strspn_1
# THEN_while_strspn_1
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_strspn_1
:END_WHILE_strspn_1
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _return_result_locals
RETURN
# Defining function strcspn
:FUNCTION_strcspn
# Defining local i
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#i
:WHILE_strcspn_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strchr
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %END_WHILE_strcspn_0
# THEN_while_strcspn_0
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_strcspn_0
:END_WHILE_strcspn_0
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _return_result_locals
RETURN
# Defining function strpbrk
:FUNCTION_strpbrk
# Defining local p
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#p
# Defining local s
PUSH_RAX	#s
:WHILE_strpbrk_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_strpbrk_0
# THEN_while_strpbrk_0
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strchr
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_strpbrk_1
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %ELSE_strpbrk_1
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strchr
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_strpbrk_1
:ELSE_strpbrk_1
:_END_IF_strpbrk_1
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_strpbrk_0
:END_WHILE_strpbrk_0
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
# Defining function memset
:FUNCTION_memset
# IF_memset_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_memset_0
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
RETURN
JUMP %_END_IF_memset_0
:ELSE_memset_0
:_END_IF_memset_0
# Defining local i
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#i
# Defining local s
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#s
:WHILE_memset_1
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETB
MOVEZX
TEST
JUMP_EQ %END_WHILE_memset_1
# THEN_while_memset_1
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_memset_1
:END_WHILE_memset_1
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
# Defining function memcpy
:FUNCTION_memcpy
# IF_memcpy_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_memcpy_0
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
RETURN
JUMP %_END_IF_memcpy_0
:ELSE_memcpy_0
:_END_IF_memcpy_0
# IF_memcpy_1
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_memcpy_1
LOAD_IMMEDIATE_rax %0
RETURN
JUMP %_END_IF_memcpy_1
:ELSE_memcpy_1
:_END_IF_memcpy_1
# Defining local s1
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#s1
# Defining local s2
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#s2
# Defining local i
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#i
:WHILE_memcpy_2
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETB
MOVEZX
TEST
JUMP_EQ %END_WHILE_memcpy_2
# THEN_while_memcpy_2
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-56
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_memcpy_2
:END_WHILE_memcpy_2
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
# Defining function memmove
:FUNCTION_memmove
# IF_memmove_0
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETB
MOVEZX
TEST
JUMP_EQ %ELSE_memmove_0
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_process_expression2
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_memcpy
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
RETURN
JUMP %_END_IF_memmove_0
:ELSE_memmove_0
:_END_IF_memmove_0
# Defining local p
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#p
# Defining local q
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#q
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
:WHILE_memmove_1
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETAE
MOVEZX
TEST
JUMP_EQ %END_WHILE_memmove_1
# THEN_while_memmove_1
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_memmove_1
:END_WHILE_memmove_1
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
# Defining function memcmp
:FUNCTION_memcmp
# IF_memcmp_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_memcmp_0
LOAD_IMMEDIATE_rax %0
RETURN
JUMP %_END_IF_memcmp_0
:ELSE_memcmp_0
:_END_IF_memcmp_0
# Defining local i
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#i
# Defining local s1
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#s1
# Defining local s2
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#s2
:WHILE_memcmp_1
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %END_WHILE_memcmp_1
# THEN_while_memcmp_1
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_memcmp_2
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_memcmp_2
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_memcmp_2
:ELSE_memcmp_2
:_END_IF_memcmp_2
JUMP %WHILE_memcmp_1
:END_WHILE_memcmp_1
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
# Defining function access
:FUNCTION_access
LOAD_EFFECTIVE_ADDRESS_rdi %16
LOAD_INTEGER_rdi
LOAD_EFFECTIVE_ADDRESS_rsi %8
LOAD_INTEGER_rsi
LOAD_IMMEDIATE_rax %21
SYSCALL
RETURN
# Defining function chdir
:FUNCTION_chdir
LOAD_EFFECTIVE_ADDRESS_rdi %8
LOAD_INTEGER_rdi
LOAD_IMMEDIATE_rax %80
SYSCALL
RETURN
# Defining function fchdir
:FUNCTION_fchdir
LOAD_EFFECTIVE_ADDRESS_rdi %8
LOAD_INTEGER_rdi
LOAD_IMMEDIATE_rax %81
SYSCALL
RETURN
# Defining function fork
:FUNCTION_fork
LOAD_IMMEDIATE_rax %57
LOAD_IMMEDIATE_rdi %0
SYSCALL
RETURN
# Defining function waitpid
:FUNCTION_waitpid
LOAD_EFFECTIVE_ADDRESS_rdi %24
LOAD_INTEGER_rdi
LOAD_EFFECTIVE_ADDRESS_rsi %16
LOAD_INTEGER_rsi
LOAD_EFFECTIVE_ADDRESS_rdx %8
LOAD_INTEGER_rdx
LOAD_IMMEDIATE_r10 %0
LOAD_IMMEDIATE_rax %61
SYSCALL
RETURN
# Defining function execve
:FUNCTION_execve
LOAD_EFFECTIVE_ADDRESS_rdi %24
LOAD_INTEGER_rdi
LOAD_EFFECTIVE_ADDRESS_rsi %16
LOAD_INTEGER_rsi
LOAD_EFFECTIVE_ADDRESS_rdx %8
LOAD_INTEGER_rdx
LOAD_IMMEDIATE_rax %59
SYSCALL
RETURN
# Defining function read
:FUNCTION_read
LOAD_EFFECTIVE_ADDRESS_rdi %24
LOAD_INTEGER_rdi
LOAD_EFFECTIVE_ADDRESS_rsi %16
LOAD_INTEGER_rsi
LOAD_EFFECTIVE_ADDRESS_rdx %8
LOAD_INTEGER_rdx
LOAD_IMMEDIATE_rax %0
SYSCALL
RETURN
# Defining function write
:FUNCTION_write
LOAD_EFFECTIVE_ADDRESS_rdi %24
LOAD_INTEGER_rdi
LOAD_EFFECTIVE_ADDRESS_rsi %16
LOAD_INTEGER_rsi
LOAD_EFFECTIVE_ADDRESS_rdx %8
LOAD_INTEGER_rdx
LOAD_IMMEDIATE_rax %1
SYSCALL
RETURN
# Defining function lseek
:FUNCTION_lseek
LOAD_EFFECTIVE_ADDRESS_rdi %24
LOAD_INTEGER_rdi
LOAD_EFFECTIVE_ADDRESS_rsi %16
LOAD_INTEGER_rsi
LOAD_EFFECTIVE_ADDRESS_rdx %8
LOAD_INTEGER_rdx
LOAD_IMMEDIATE_rax %8
SYSCALL
RETURN
# Defining function close
:FUNCTION_close
LOAD_EFFECTIVE_ADDRESS_rdi %8
LOAD_INTEGER_rdi
LOAD_IMMEDIATE_rax %3
SYSCALL
RETURN
# Defining function _getcwd
:FUNCTION__getcwd
LOAD_EFFECTIVE_ADDRESS_rdi %16
LOAD_INTEGER_rdi
LOAD_EFFECTIVE_ADDRESS_rsi %8
LOAD_INTEGER_rsi
LOAD_IMMEDIATE_rax %79
SYSCALL
RETURN
# Defining function getcwd
:FUNCTION_getcwd
# Defining local c
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION__getcwd
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#c
# IF_getcwd_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_getcwd_0
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_getcwd_0
:ELSE_getcwd_0
:_END_IF_getcwd_0
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _return_result_locals
RETURN
# Defining function getwd
:FUNCTION_getwd
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_getcwd
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
RETURN
# Defining function get_current_dir_name
:FUNCTION_get_current_dir_name
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_malloc
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_getcwd
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
RETURN
# Defining function brk
:FUNCTION_brk
LOAD_RSP_IMMEDIATE_into_rax %8
PUSH_RAX
LOAD_IMMEDIATE_rax %12
POP_RBX
COPY_rbx_to_rdi
SYSCALL
RETURN
# Defining function uname
:FUNCTION_uname
LOAD_EFFECTIVE_ADDRESS_rdi %8
LOAD_INTEGER_rdi
LOAD_IMMEDIATE_rax %63
SYSCALL
RETURN
# Defining function free
:FUNCTION_free
RETURN
# Defining function malloc
:FUNCTION_malloc
# IF_malloc_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL__brk_ptr
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_malloc_0
LOAD_IMMEDIATE_rax &GLOBAL__brk_ptr
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_brk
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax &GLOBAL__malloc_ptr
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL__brk_ptr
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_malloc_0
:ELSE_malloc_0
:_END_IF_malloc_0
# IF_malloc_1
LOAD_IMMEDIATE_rax &GLOBAL__brk_ptr
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL__malloc_ptr
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
CMP
SETL
MOVEZX
TEST
JUMP_EQ %ELSE_malloc_1
LOAD_IMMEDIATE_rax &GLOBAL__brk_ptr
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL__malloc_ptr
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_brk
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_malloc_2
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL__brk_ptr
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_malloc_2
LOAD_IMMEDIATE_rax %0
RETURN
JUMP %_END_IF_malloc_2
:ELSE_malloc_2
:_END_IF_malloc_2
JUMP %_END_IF_malloc_1
:ELSE_malloc_1
:_END_IF_malloc_1
# Defining local old_malloc
LOAD_IMMEDIATE_rax &GLOBAL__malloc_ptr
LOAD_INTEGER
PUSH_RAX	#old_malloc
LOAD_IMMEDIATE_rax &GLOBAL__malloc_ptr
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL__malloc_ptr
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _return_result_locals
RETURN
# Defining function memset
:FUNCTION_memset
# Defining local s
PUSH_RAX	#s
# FOR_initialization_memset_0
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
:FOR_memset_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETL
MOVEZX
TEST
JUMP_EQ %FOR_END_memset_0
JUMP %FOR_THEN_memset_0
:FOR_ITER_memset_0
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %FOR_memset_0
:FOR_THEN_memset_0
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %FOR_ITER_memset_0
:FOR_END_memset_0
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _return_result_locals
RETURN
# Defining function calloc
:FUNCTION_calloc
# Defining local ret
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
MULTIPLYS_rax_by_rbx_into_rax
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_malloc
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#ret
# IF_calloc_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_calloc_0
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_calloc_0
:ELSE_calloc_0
:_END_IF_calloc_0
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_process_expression2
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
MULTIPLYS_rax_by_rbx_into_rax
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_memset
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _return_result_locals
RETURN
# Defining function open
:FUNCTION_open
LOAD_EFFECTIVE_ADDRESS_rdi %24
LOAD_INTEGER_rdi
LOAD_EFFECTIVE_ADDRESS_rsi %16
LOAD_INTEGER_rsi
LOAD_EFFECTIVE_ADDRESS_rdx %8
LOAD_INTEGER_rdx
LOAD_IMMEDIATE_rax %2
SYSCALL
RETURN
# Defining function __init_io
:FUNCTION___init_io
LOAD_IMMEDIATE_rax &GLOBAL___list
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax &GLOBAL_stdin
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %64
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax &GLOBAL_stdin
LOAD_INTEGER
# looking up offset
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax &GLOBAL_stdin
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax &GLOBAL_stdin
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %32
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax &GLOBAL_stdin
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %40
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %2
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax &GLOBAL_stdout
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %64
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
# looking up offset
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %32
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %512
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %40
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %514
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax &GLOBAL_stderr
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %64
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax &GLOBAL_stderr
LOAD_INTEGER
# looking up offset
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %2
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax &GLOBAL_stderr
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax &GLOBAL_stderr
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %32
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %512
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax &GLOBAL_stderr
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %40
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %514
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
RETURN
# Defining function __kill_io
:FUNCTION___kill_io
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fflush
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_stderr
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fflush
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
:WHILE___kill_io_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL___list
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE___kill_io_0
# THEN_while___kill_io_0
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL___list
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fflush
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_IMMEDIATE_rax &GLOBAL___list
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL___list
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %48
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE___kill_io_0
:END_WHILE___kill_io_0
RETURN
# Defining function fgetc
:FUNCTION_fgetc
# IF_fgetc_0
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_fgetc_0
LOAD_IMMEDIATE_rax %0xFFFFFFFF
RETURN
JUMP %_END_IF_fgetc_0
:ELSE_fgetc_0
:_END_IF_fgetc_0
# IF_fgetc_1
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_fgetc_1
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
# Defining local r
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %40
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_process_expression2
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_read
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#r
# IF_fgetc_2
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_fgetc_2
LOAD_IMMEDIATE_rax %0xFFFFFFFF
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_fgetc_2
:ELSE_fgetc_2
:_END_IF_fgetc_2
POP_RBX	# _recursive_statement_locals
JUMP %_END_IF_fgetc_1
:ELSE_fgetc_1
:_END_IF_fgetc_1
# IF_fgetc_3
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %32
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETLE
MOVEZX
TEST
JUMP_EQ %ELSE_fgetc_3
LOAD_IMMEDIATE_rax %0xFFFFFFFF
RETURN
JUMP %_END_IF_fgetc_3
:ELSE_fgetc_3
:_END_IF_fgetc_3
# Defining local ret
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %40
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#ret
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0xFF
POP_RBX	# _common_recursion
AND_rax_rbx
POP_RBX	# _return_result_locals
RETURN
# Defining function fread
:FUNCTION_fread
# IF_fread_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_fread_0
LOAD_IMMEDIATE_rax %0
RETURN
JUMP %_END_IF_fread_0
:ELSE_fread_0
:_END_IF_fread_0
# IF_fread_1
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_fread_1
LOAD_IMMEDIATE_rax %0
RETURN
JUMP %_END_IF_fread_1
:ELSE_fread_1
:_END_IF_fread_1
# Defining local n
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
PUSH_RAX	#n
# Defining local p
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#p
# Defining local i
PUSH_RAX	#i
# Defining local c
PUSH_RAX	#c
# FOR_initialization_fread_2
LOAD_BASE_ADDRESS_rax %-64
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
:FOR_fread_2
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETL
MOVEZX
TEST
JUMP_EQ %FOR_END_fread_2
JUMP %FOR_THEN_fread_2
:FOR_ITER_fread_2
LOAD_BASE_ADDRESS_rax %-64
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %FOR_fread_2
:FOR_THEN_fread_2
LOAD_BASE_ADDRESS_rax %-72
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fgetc
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_fread_3
LOAD_IMMEDIATE_rax %0xFFFFFFFF
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_fread_3
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
XCHG_rax_rbx
CQTO
DIVIDES_rax_by_rbx_into_rax
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_fread_3
:ELSE_fread_3
:_END_IF_fread_3
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_CHAR
JUMP %FOR_ITER_fread_2
:FOR_END_fread_2
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
XCHG_rax_rbx
CQTO
DIVIDES_rax_by_rbx_into_rax
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
# Defining function getchar
:FUNCTION_getchar
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_stdin
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fgetc
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
RETURN
# Defining function fgets
:FUNCTION_fgets
# Defining local i
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#i
# Defining local ch
PUSH_RAX	#ch
:WHILE_fgets_0
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETL
MOVEZX
TEST
JUMP_EQ %END_WHILE_fgets_0
# THEN_while_fgets_0
LOAD_BASE_ADDRESS_rax %-48
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fgetc
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_fgets_1
LOAD_IMMEDIATE_rax %0xFFFFFFFF
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_fgets_1
JUMP %END_WHILE_fgets_0
JUMP %_END_IF_fgets_1
:ELSE_fgets_1
:_END_IF_fgets_1
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_fgets_2
LOAD_IMMEDIATE_rax %10
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_fgets_2
JUMP %END_WHILE_fgets_0
JUMP %_END_IF_fgets_2
:ELSE_fgets_2
:_END_IF_fgets_2
JUMP %WHILE_fgets_0
:END_WHILE_fgets_0
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
# Defining function fputc
:FUNCTION_fputc
# IF_fputc_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_fputc_0
RETURN
JUMP %_END_IF_fputc_0
:ELSE_fputc_0
:_END_IF_fputc_0
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %40
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_fputc_1
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %32
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_fputc_1
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fflush
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_fputc_1
:ELSE_fputc_1
# IF_fputc_2
LOAD_IMMEDIATE_rax %10
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %2
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETGE
MOVEZX
POP_RBX	# _common_recursion
AND_rax_rbx
TEST
JUMP_EQ %ELSE_fputc_2
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fflush
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_fputc_2
:ELSE_fputc_2
:_END_IF_fputc_2
:_END_IF_fputc_1
RETURN
# Defining function fwrite
:FUNCTION_fwrite
# Defining local n
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
MULTIPLY_rax_by_rbx_into_rax
PUSH_RAX	#n
# IF_fwrite_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_fwrite_0
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_fwrite_0
:ELSE_fwrite_0
:_END_IF_fwrite_0
# Defining local p
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#p
# Defining local c
PUSH_RAX	#c
# Defining local i
PUSH_RAX	#i
# FOR_initialization_fwrite_1
LOAD_BASE_ADDRESS_rax %-72
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
:FOR_fwrite_1
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETL
MOVEZX
TEST
JUMP_EQ %FOR_END_fwrite_1
JUMP %FOR_THEN_fwrite_1
:FOR_ITER_fwrite_1
LOAD_BASE_ADDRESS_rax %-72
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %FOR_fwrite_1
:FOR_THEN_fwrite_1
LOAD_BASE_ADDRESS_rax %-64
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %FOR_ITER_fwrite_1
:FOR_END_fwrite_1
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
XCHG_rax_rbx
CQTO
DIVIDES_rax_by_rbx_into_rax
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
# Defining function putchar
:FUNCTION_putchar
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
RETURN
# Defining function fputs
:FUNCTION_fputs
:WHILE_fputs_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_fputs_0
# THEN_while_fputs_0
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_BASE_ADDRESS_rax %-8
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_fputs_0
:END_WHILE_fputs_0
LOAD_IMMEDIATE_rax %0
RETURN
# Defining function puts
:FUNCTION_puts
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %10
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_IMMEDIATE_rax %0
RETURN
# Defining function fopen
:FUNCTION_fopen
# Defining local f
PUSH_RAX	#f
# Defining local fi
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %64
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#fi
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %48
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL___list
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_fopen_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL___list
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %ELSE_fopen_0
LOAD_IMMEDIATE_rax &GLOBAL___list
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %56
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_fopen_0
:ELSE_fopen_0
:_END_IF_fopen_0
LOAD_IMMEDIATE_rax &GLOBAL___list
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
# Defining local size
PUSH_RAX	#size
# IF_fopen_1
LOAD_IMMEDIATE_rax %119
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_fopen_1
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %00100
POP_RBX	# _common_recursion
OR_rax_rbx
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %001000
POP_RBX	# _common_recursion
OR_rax_rbx
PUSH_RAX	#_process_expression2
LOAD_IMMEDIATE_rax %00600
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_open
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_fopen_1
:ELSE_fopen_1
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_process_expression2
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_open
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
:_END_IF_fopen_1
# IF_fopen_2
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETG
MOVEZX
TEST
JUMP_EQ %ELSE_fopen_2
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_fopen_2
:ELSE_fopen_2
:_END_IF_fopen_2
# IF_fopen_3
LOAD_IMMEDIATE_rax %119
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_fopen_3
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %40
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %0x1000
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
MULTIPLYS_rax_by_rbx_into_rax
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_malloc
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %32
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0x1000
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_fopen_3
:ELSE_fopen_3
LOAD_BASE_ADDRESS_rax %-48
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_process_expression2
LOAD_IMMEDIATE_rax %2
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_lseek
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %40
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
MULTIPLYS_rax_by_rbx_into_rax
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_malloc
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %32
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_process_expression2
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_lseek
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %40
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_process_expression2
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_read
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
:_END_IF_fopen_3
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
# looking up offset
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
# Defining function fflush
:FUNCTION_fflush
# IF_fflush_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_fflush_0
LOAD_IMMEDIATE_rax %0
RETURN
JUMP %_END_IF_fflush_0
:ELSE_fflush_0
:_END_IF_fflush_0
# IF_fflush_1
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_fflush_1
LOAD_IMMEDIATE_rax %0
RETURN
JUMP %_END_IF_fflush_1
:ELSE_fflush_1
:_END_IF_fflush_1
# Defining local error
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %40
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_process_expression2
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_write
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#error
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %24
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %24
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _return_result_locals
RETURN
# Defining function fclose
:FUNCTION_fclose
# IF_fclose_0
LOAD_IMMEDIATE_rax %2
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETGE
MOVEZX
TEST
JUMP_EQ %ELSE_fclose_0
LOAD_IMMEDIATE_rax %0
RETURN
JUMP %_END_IF_fclose_0
:ELSE_fclose_0
:_END_IF_fclose_0
# IF_fclose_1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_fclose_1
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fflush
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_fclose_1
:ELSE_fclose_1
:_END_IF_fclose_1
# Defining local fd
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#fd
# IF_fclose_2
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %56
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %ELSE_fclose_2
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %56
ADD_rbx_to_rax
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %48
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %48
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_fclose_2
:ELSE_fclose_2
:_END_IF_fclose_2
# IF_fclose_3
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %48
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %ELSE_fclose_3
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %48
ADD_rbx_to_rax
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %56
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %56
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_fclose_3
:ELSE_fclose_3
:_END_IF_fclose_3
# IF_fclose_4
LOAD_IMMEDIATE_rax &GLOBAL___list
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_fclose_4
LOAD_IMMEDIATE_rax &GLOBAL___list
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL___list
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %48
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_fclose_4
:ELSE_fclose_4
:_END_IF_fclose_4
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %40
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_free
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_free
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_close
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _return_result_locals
RETURN
# Defining function ungetc
:FUNCTION_ungetc
# IF_ungetc_0
LOAD_IMMEDIATE_rax %2
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETGE
MOVEZX
TEST
JUMP_EQ %ELSE_ungetc_0
LOAD_IMMEDIATE_rax %0xFFFFFFFF
RETURN
JUMP %_END_IF_ungetc_0
:ELSE_ungetc_0
:_END_IF_ungetc_0
# IF_ungetc_1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_ungetc_1
LOAD_IMMEDIATE_rax %0xFFFFFFFF
RETURN
JUMP %_END_IF_ungetc_1
:ELSE_ungetc_1
:_END_IF_ungetc_1
# IF_ungetc_2
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_ungetc_2
LOAD_IMMEDIATE_rax %0xFFFFFFFF
RETURN
JUMP %_END_IF_ungetc_2
:ELSE_ungetc_2
:_END_IF_ungetc_2
# IF_ungetc_3
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %40
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %ELSE_ungetc_3
LOAD_IMMEDIATE_rax %0xFFFFFFFF
RETURN
JUMP %_END_IF_ungetc_3
:ELSE_ungetc_3
:_END_IF_ungetc_3
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
RETURN
# Defining function ftell
:FUNCTION_ftell
# IF_ftell_0
LOAD_IMMEDIATE_rax %2
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETGE
MOVEZX
TEST
JUMP_EQ %ELSE_ftell_0
LOAD_IMMEDIATE_rax %0
RETURN
JUMP %_END_IF_ftell_0
:ELSE_ftell_0
:_END_IF_ftell_0
# IF_ftell_1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_ftell_1
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %24
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
RETURN
JUMP %_END_IF_ftell_1
:ELSE_ftell_1
:_END_IF_ftell_1
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
RETURN
# Defining function fseek
:FUNCTION_fseek
# IF_fseek_0
LOAD_IMMEDIATE_rax %2
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETGE
MOVEZX
TEST
JUMP_EQ %ELSE_fseek_0
LOAD_IMMEDIATE_rax %0
RETURN
JUMP %_END_IF_fseek_0
:ELSE_fseek_0
:_END_IF_fseek_0
# IF_fseek_1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_fseek_1
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fflush
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_process_expression2
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_lseek
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
RETURN
JUMP %_END_IF_fseek_1
:ELSE_fseek_1
:_END_IF_fseek_1
# Defining local pos
PUSH_RAX	#pos
# IF_fseek_2
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_fseek_2
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_fseek_2
:ELSE_fseek_2
# IF_fseek_3
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_fseek_3
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_fseek_3
:ELSE_fseek_3
# IF_fseek_4
LOAD_IMMEDIATE_rax %2
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_fseek_4
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %32
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_fseek_4
:ELSE_fseek_4
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
POP_RBX	# _return_result_locals
RETURN
:_END_IF_fseek_4
:_END_IF_fseek_3
:_END_IF_fseek_2
# IF_fseek_5
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETL
MOVEZX
TEST
JUMP_EQ %ELSE_fseek_5
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_fseek_5
:ELSE_fseek_5
:_END_IF_fseek_5
# IF_fseek_6
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %32
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETG
MOVEZX
TEST
JUMP_EQ %ELSE_fseek_6
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_fseek_6
:ELSE_fseek_6
:_END_IF_fseek_6
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _return_result_locals
RETURN
# Defining function rewind
:FUNCTION_rewind
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_process_expression2
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fseek
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
RETURN
# Defining function require
:FUNCTION_require
# IF_require_0
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _common_recursion
XOR_rbx_rax_into_rax
TEST
JUMP_EQ %ELSE_require_0
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stderr
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_exit
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_require_0
:ELSE_require_0
:_END_IF_require_0
RETURN
# Defining function match
:FUNCTION_match
# IF_match_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
POP_RBX	# _common_recursion
AND_rax_rbx
TEST
JUMP_EQ %ELSE_match_0
LOAD_IMMEDIATE_rax %1
RETURN
JUMP %_END_IF_match_0
:ELSE_match_0
:_END_IF_match_0
# IF_match_1
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_match_1
LOAD_IMMEDIATE_rax %0
RETURN
JUMP %_END_IF_match_1
:ELSE_match_1
:_END_IF_match_1
# IF_match_2
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_match_2
LOAD_IMMEDIATE_rax %0
RETURN
JUMP %_END_IF_match_2
:ELSE_match_2
:_END_IF_match_2
# Defining local i
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
PUSH_RAX	#i
:DO_match_3
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_match_4
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %ELSE_match_4
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_match_4
:ELSE_match_4
:_END_IF_match_4
:DO_TEST_match_3
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
POP_RBX	# _common_recursion
AND_rax_rbx
TEST
JUMP_NE %DO_match_3
:DO_END_match_3
LOAD_IMMEDIATE_rax %1
POP_RBX	# _return_result_locals
RETURN
# Defining function in_set
:FUNCTION_in_set
# IF_in_set_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_in_set_0
LOAD_IMMEDIATE_rax %0
RETURN
JUMP %_END_IF_in_set_0
:ELSE_in_set_0
:_END_IF_in_set_0
:WHILE_in_set_1
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_in_set_1
# THEN_while_in_set_1
# IF_in_set_2
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_in_set_2
LOAD_IMMEDIATE_rax %1
RETURN
JUMP %_END_IF_in_set_2
:ELSE_in_set_2
:_END_IF_in_set_2
LOAD_BASE_ADDRESS_rax %-16
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_in_set_1
:END_WHILE_in_set_1
LOAD_IMMEDIATE_rax %0
RETURN
# Defining function __index_number
:FUNCTION___index_number
# Defining local i
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#i
:WHILE___index_number_0
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE___index_number_0
# THEN_while___index_number_0
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
# IF___index_number_1
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE___index_number_1
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF___index_number_1
:ELSE___index_number_1
:_END_IF___index_number_1
JUMP %WHILE___index_number_0
:END_WHILE___index_number_0
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _return_result_locals
RETURN
# Defining function __toupper
:FUNCTION___toupper
# IF___toupper_0
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING___toupper_1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_in_set
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
TEST
JUMP_EQ %ELSE___toupper_0
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0xDF
POP_RBX	# _common_recursion
AND_rax_rbx
RETURN
JUMP %_END_IF___toupper_0
:ELSE___toupper_0
:_END_IF___toupper_0
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
RETURN
# Defining function __set_reader
:FUNCTION___set_reader
# Defining local n
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#n
# Defining local i
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#i
# Defining local hold
PUSH_RAX	#hold
# Defining local negative_p
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#negative_p
# IF___set_reader_0
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %45
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE___set_reader_0
LOAD_BASE_ADDRESS_rax %-64
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-48
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF___set_reader_0
:ELSE___set_reader_0
:_END_IF___set_reader_0
:WHILE___set_reader_1
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_in_set
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
TEST
JUMP_EQ %END_WHILE___set_reader_1
# THEN_while___set_reader_1
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
MULTIPLYS_rax_by_rbx_into_rax
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-56
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION___toupper
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION___index_number
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
# IF___set_reader_2
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE___set_reader_2
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF___set_reader_2
:ELSE___set_reader_2
:_END_IF___set_reader_2
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-48
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE___set_reader_1
:END_WHILE___set_reader_1
# IF___set_reader_3
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %ELSE___set_reader_3
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF___set_reader_3
:ELSE___set_reader_3
:_END_IF___set_reader_3
# IF___set_reader_4
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
TEST
JUMP_EQ %ELSE___set_reader_4
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF___set_reader_4
:ELSE___set_reader_4
:_END_IF___set_reader_4
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
# Defining function strtoint
:FUNCTION_strtoint
# Defining local result
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#result
# IF_strtoint_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_strtoint_0
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_strtoint_0
:ELSE_strtoint_0
# IF_strtoint_1
LOAD_IMMEDIATE_rax %48
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %98
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
POP_RBX	# _common_recursion
AND_rax_rbx
TEST
JUMP_EQ %ELSE_strtoint_1
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_strtoint_2
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %2
PUSH_RAX	#_process_expression2
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %2
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION___set_reader
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_strtoint_1
:ELSE_strtoint_1
# IF_strtoint_3
LOAD_IMMEDIATE_rax %48
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %120
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
POP_RBX	# _common_recursion
AND_rax_rbx
TEST
JUMP_EQ %ELSE_strtoint_3
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_strtoint_4
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %16
PUSH_RAX	#_process_expression2
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %2
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION___set_reader
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_strtoint_3
:ELSE_strtoint_3
# IF_strtoint_5
LOAD_IMMEDIATE_rax %48
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_strtoint_5
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_strtoint_6
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %8
PUSH_RAX	#_process_expression2
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION___set_reader
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_strtoint_5
:ELSE_strtoint_5
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_strtoint_7
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %10
PUSH_RAX	#_process_expression2
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION___set_reader
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
:_END_IF_strtoint_5
:_END_IF_strtoint_3
:_END_IF_strtoint_1
:_END_IF_strtoint_0
# IF_strtoint_8
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0x80000000
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
AND_rax_rbx
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %ELSE_strtoint_8
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0xFFFFFFFF
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %31
POP_RBX	# _common_recursion
COPY_rax_to_rcx
COPY_rbx_to_rax
SAL_rax_cl
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
OR_rax_rbx
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_strtoint_8
:ELSE_strtoint_8
:_END_IF_strtoint_8
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _return_result_locals
RETURN
# Defining function int2str
:FUNCTION_int2str
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETL
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_int2str_0
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %37
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETG
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_int2str_1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
# Defining local p
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %34
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#p
# IF_int2str_2
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_int2str_2
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_int2str_2
:ELSE_int2str_2
:_END_IF_int2str_2
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %32
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
# Defining local i
PUSH_RAX	#i
# Defining local sign_p
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#sign_p
# Defining local table
LOAD_IMMEDIATE_rax &STRING_int2str_3
PUSH_RAX	#table
# IF_int2str_4
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %10
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
POP_RBX	# _common_recursion
AND_rax_rbx
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0x80000000
POP_RBX	# _common_recursion
AND_rax_rbx
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
POP_RBX	# _common_recursion
AND_rax_rbx
TEST
JUMP_EQ %ELSE_int2str_4
LOAD_BASE_ADDRESS_rax %-48
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0x7FFFFFFF
POP_RBX	# _common_recursion
AND_rax_rbx
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_int2str_5
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_int2str_5
LOAD_IMMEDIATE_rax &STRING_int2str_6
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_int2str_5
:ELSE_int2str_5
:_END_IF_int2str_5
LOAD_BASE_ADDRESS_rax %-56
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_int2str_4
:ELSE_int2str_4
LOAD_BASE_ADDRESS_rax %-48
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0x7FFFFFFF
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %31
POP_RBX	# _common_recursion
COPY_rax_to_rcx
COPY_rbx_to_rax
SAL_rax_cl
POP_RBX	# _common_recursion
OR_rax_rbx
POP_RBX	# _common_recursion
AND_rax_rbx
POP_RBX	# _common_recursion
STORE_INTEGER
:_END_IF_int2str_4
:DO_int2str_7
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
XCHG_rax_rbx
LOAD_IMMEDIATE_rdx %0
MODULUS_rax_from_rbx_into_rbx
MOVE_rdx_to_rax
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-48
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
XCHG_rax_rbx
LOAD_IMMEDIATE_rdx %0
DIVIDE_rax_by_rbx_into_rax
POP_RBX	# _common_recursion
STORE_INTEGER
:DO_TEST_int2str_7
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETB
MOVEZX
TEST
JUMP_NE %DO_int2str_7
:DO_END_int2str_7
# IF_int2str_8
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
TEST
JUMP_EQ %ELSE_int2str_8
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %45
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_int2str_8
:ELSE_int2str_8
:_END_IF_int2str_8
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
# Defining function run_substitution
:FUNCTION_run_substitution
# Defining local value
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_env_lookup
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#value
# IF_run_substitution_0
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %ELSE_run_substitution_0
# Defining local s
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#s
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strcat
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strcat
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax %1
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_run_substitution_0
:ELSE_run_substitution_0
:_END_IF_run_substitution_0
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
RETURN
# Defining function variable_substitute_ifset
:FUNCTION_variable_substitute_ifset
# Defining local index_old
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#index_old
# Defining local perform
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#perform
# Defining local input_length
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strlen
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#input_length
:WHILE_variable_substitute_ifset_0
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETL
MOVEZX
TEST
JUMP_EQ %END_WHILE_variable_substitute_ifset_0
# THEN_while_variable_substitute_ifset_0
# IF_variable_substitute_ifset_1
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %58
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %45
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
POP_RBX	# _common_recursion
AND_rax_rbx
TEST
JUMP_EQ %ELSE_variable_substitute_ifset_1
LOAD_BASE_ADDRESS_rax %-48
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %END_WHILE_variable_substitute_ifset_0
JUMP %_END_IF_variable_substitute_ifset_1
:ELSE_variable_substitute_ifset_1
:_END_IF_variable_substitute_ifset_1
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_variable_substitute_ifset_0
:END_WHILE_variable_substitute_ifset_0
# IF_variable_substitute_ifset_2
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_variable_substitute_ifset_2
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_variable_substitute_ifset_2
:ELSE_variable_substitute_ifset_2
:_END_IF_variable_substitute_ifset_2
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
# Defining local offset
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#offset
# Defining local var_name
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#var_name
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_variable_substitute_ifset_3
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
:WHILE_variable_substitute_ifset_4
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %58
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_variable_substitute_ifset_4
# THEN_while_variable_substitute_ifset_4
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_variable_substitute_ifset_4
:END_WHILE_variable_substitute_ifset_4
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %2
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-64
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
# Defining local text
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#text
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-80
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_variable_substitute_ifset_5
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
:WHILE_variable_substitute_ifset_6
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %125
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_variable_substitute_ifset_6
# THEN_while_variable_substitute_ifset_6
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETG
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_variable_substitute_ifset_7
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_BASE_ADDRESS_rax %-80
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_variable_substitute_ifset_6
:END_WHILE_variable_substitute_ifset_6
# IF_variable_substitute_ifset_8
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_run_substitution
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_variable_substitute_ifset_8
# Defining local s
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#s
LOAD_BASE_ADDRESS_rax %-88
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-88
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strcat
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-88
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-88
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-80
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strcat
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-88
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
POP_RBX	# _recursive_statement_locals
JUMP %_END_IF_variable_substitute_ifset_8
:ELSE_variable_substitute_ifset_8
:_END_IF_variable_substitute_ifset_8
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
# Defining function variable_substitute
:FUNCTION_variable_substitute
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
# Defining local index_old
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#index_old
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_process_expression2
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_variable_substitute_ifset
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_variable_substitute_0
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %ELSE_variable_substitute_0
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_variable_substitute_0
:ELSE_variable_substitute_0
:_END_IF_variable_substitute_0
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
# Defining local var_name
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#var_name
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_variable_substitute_1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
# Defining local offset
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#offset
# Defining local substitute_done
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#substitute_done
# Defining local c
PUSH_RAX	#c
:WHILE_variable_substitute_2
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %END_WHILE_variable_substitute_2
# THEN_while_variable_substitute_2
LOAD_BASE_ADDRESS_rax %-72
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETG
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_variable_substitute_3
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
# IF_variable_substitute_4
LOAD_IMMEDIATE_rax %0xFFFFFFFF
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %10
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
POP_RBX	# _common_recursion
OR_rax_rbx
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strlen
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
CMP
SETG
MOVEZX
POP_RBX	# _common_recursion
OR_rax_rbx
TEST
JUMP_EQ %ELSE_variable_substitute_4
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_variable_substitute_5
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stderr
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_exit
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_variable_substitute_4
:ELSE_variable_substitute_4
# IF_variable_substitute_6
LOAD_IMMEDIATE_rax %92
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_variable_substitute_6
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_variable_substitute_6
:ELSE_variable_substitute_6
# IF_variable_substitute_7
LOAD_IMMEDIATE_rax %125
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_variable_substitute_7
LOAD_BASE_ADDRESS_rax %-64
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_variable_substitute_7
:ELSE_variable_substitute_7
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
:_END_IF_variable_substitute_7
:_END_IF_variable_substitute_6
:_END_IF_variable_substitute_4
JUMP %WHILE_variable_substitute_2
:END_WHILE_variable_substitute_2
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_run_substitution
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
# Defining function variable_all
:FUNCTION_variable_all
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fflush
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
# Defining local index
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#index
# Defining local argv_length
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_array_length
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#argv_length
# Defining local i
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#i
# Defining local argv_element
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#argv_element
# Defining local hold
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
SAL_rax_Immediate8 !3
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#hold
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
:WHILE_variable_all_0
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_variable_all_1
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
XOR_rbx_rax_into_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_variable_all_2
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
XOR_rbx_rax_into_rax
POP_RBX	# _common_recursion
AND_rax_rbx
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_variable_all_3
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
XOR_rbx_rax_into_rax
POP_RBX	# _common_recursion
AND_rax_rbx
TEST
JUMP_EQ %END_WHILE_variable_all_0
# THEN_while_variable_all_0
LOAD_BASE_ADDRESS_rax %-48
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-64
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
SAL_rax_Immediate8 !3
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_variable_all_4
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_variable_all_4
JUMP %END_WHILE_variable_all_0
JUMP %_END_IF_variable_all_4
:ELSE_variable_all_4
:_END_IF_variable_all_4
JUMP %WHILE_variable_all_0
:END_WHILE_variable_all_0
# IF_variable_all_5
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_variable_all_6
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_variable_all_7
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
OR_rax_rbx
TEST
JUMP_EQ %ELSE_variable_all_5
LOAD_BASE_ADDRESS_rax %-48
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %2
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-64
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
SAL_rax_Immediate8 !3
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_variable_all_5
:ELSE_variable_all_5
:_END_IF_variable_all_5
# FOR_initialization_variable_all_8
:FOR_variable_all_8
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETL
MOVEZX
TEST
JUMP_EQ %FOR_END_variable_all_8
JUMP %FOR_THEN_variable_all_8
:FOR_ITER_variable_all_8
LOAD_BASE_ADDRESS_rax %-48
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %FOR_variable_all_8
:FOR_THEN_variable_all_8
LOAD_BASE_ADDRESS_rax %-64
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
SAL_rax_Immediate8 !3
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strcpy
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strlen
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %32
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %FOR_ITER_variable_all_8
:FOR_END_variable_all_8
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_CHAR
POP_RBX	# _recursive_statement_locals
POP_RBX	# _recursive_statement_locals
POP_RBX	# _recursive_statement_locals
POP_RBX	# _recursive_statement_locals
POP_RBX	# _recursive_statement_locals
RETURN
# Defining function handle_variables
:FUNCTION_handle_variables
# Defining local index
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#index
# Defining local input
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#input
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_handle_variables_0
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strcpy
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_handle_variables_1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
:WHILE_handle_variables_2
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %36
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_handle_variables_2
# THEN_while_handle_variables_2
# IF_handle_variables_3
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_handle_variables_3
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_handle_variables_3
:ELSE_handle_variables_3
:_END_IF_handle_variables_3
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_handle_variables_2
:END_WHILE_handle_variables_2
# Defining local offset
PUSH_RAX	#offset
:substitute	#C goto label
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_handle_variables_4
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %123
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_handle_variables_4
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_process_expression2
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_variable_substitute
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_handle_variables_4
:ELSE_handle_variables_4
# IF_handle_variables_5
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %64
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_handle_variables_5
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_variable_all
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_handle_variables_5
:ELSE_handle_variables_5
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_handle_variables_6
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stderr
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_exit
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
:_END_IF_handle_variables_5
:_END_IF_handle_variables_4
LOAD_BASE_ADDRESS_rax %-48
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strlen
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
:WHILE_handle_variables_7
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_handle_variables_7
# THEN_while_handle_variables_7
# IF_handle_variables_8
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %36
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_handle_variables_8
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fflush
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %substitute
JUMP %_END_IF_handle_variables_8
:ELSE_handle_variables_8
:_END_IF_handle_variables_8
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_handle_variables_7
:END_WHILE_handle_variables_7
POP_RBX	# _recursive_statement_locals
POP_RBX	# _recursive_statement_locals
POP_RBX	# _recursive_statement_locals
RETURN
# Defining function find_char
:FUNCTION_find_char
# IF_find_char_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_find_char_0
LOAD_IMMEDIATE_rax %0
RETURN
JUMP %_END_IF_find_char_0
:ELSE_find_char_0
:_END_IF_find_char_0
:WHILE_find_char_1
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_find_char_1
# THEN_while_find_char_1
LOAD_BASE_ADDRESS_rax %-8
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_find_char_2
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_find_char_2
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
RETURN
JUMP %_END_IF_find_char_2
:ELSE_find_char_2
:_END_IF_find_char_2
JUMP %WHILE_find_char_1
:END_WHILE_find_char_1
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
RETURN
# Defining function array_length
:FUNCTION_array_length
# Defining local length
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#length
:WHILE_array_length_0
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
SAL_rax_Immediate8 !3
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_array_length_0
# THEN_while_array_length_0
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_array_length_0
:END_WHILE_array_length_0
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _return_result_locals
RETURN
# Defining function env_lookup
:FUNCTION_env_lookup
# Defining local n
LOAD_IMMEDIATE_rax &GLOBAL_env
LOAD_INTEGER
PUSH_RAX	#n
:WHILE_env_lookup_0
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_env_lookup_0
# THEN_while_env_lookup_0
# IF_env_lookup_1
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
TEST
JUMP_EQ %ELSE_env_lookup_1
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_env_lookup_1
:ELSE_env_lookup_1
:_END_IF_env_lookup_1
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_env_lookup_0
:END_WHILE_env_lookup_0
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
RETURN
# Defining function find_executable
:FUNCTION_find_executable
# IF_find_executable_0
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_find_executable_1
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
TEST
JUMP_EQ %ELSE_find_executable_0
LOAD_IMMEDIATE_rax %0
RETURN
JUMP %_END_IF_find_executable_0
:ELSE_find_executable_0
:_END_IF_find_executable_0
# IF_find_executable_2
LOAD_IMMEDIATE_rax %46
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %47
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
POP_RBX	# _common_recursion
OR_rax_rbx
TEST
JUMP_EQ %ELSE_find_executable_2
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
RETURN
JUMP %_END_IF_find_executable_2
:ELSE_find_executable_2
:_END_IF_find_executable_2
# Defining local trial
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#trial
# Defining local MPATH
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#MPATH
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_find_executable_3
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_PATH
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strcpy
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
# Defining local t
PUSH_RAX	#t
# Defining local next
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %58
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_find_char
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#next
# Defining local index
PUSH_RAX	#index
# Defining local offset
PUSH_RAX	#offset
# Defining local mpath_length
PUSH_RAX	#mpath_length
# Defining local name_length
PUSH_RAX	#name_length
# Defining local trial_length
PUSH_RAX	#trial_length
:WHILE_find_executable_4
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_find_executable_4
# THEN_while_find_executable_4
LOAD_BASE_ADDRESS_rax %-88
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strlen
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
# FOR_initialization_find_executable_5
LOAD_BASE_ADDRESS_rax %-56
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
:FOR_find_executable_5
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-88
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETL
MOVEZX
TEST
JUMP_EQ %FOR_END_find_executable_5
JUMP %FOR_THEN_find_executable_5
:FOR_ITER_find_executable_5
LOAD_BASE_ADDRESS_rax %-56
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %FOR_find_executable_5
:FOR_THEN_find_executable_5
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_CHAR
JUMP %FOR_ITER_find_executable_5
:FOR_END_find_executable_5
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-72
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strlen
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
# FOR_initialization_find_executable_6
LOAD_BASE_ADDRESS_rax %-56
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
:FOR_find_executable_6
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETL
MOVEZX
TEST
JUMP_EQ %FOR_END_find_executable_6
JUMP %FOR_THEN_find_executable_6
:FOR_ITER_find_executable_6
LOAD_BASE_ADDRESS_rax %-56
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %FOR_find_executable_6
:FOR_THEN_find_executable_6
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETG
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_find_executable_7
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
STORE_CHAR
JUMP %FOR_ITER_find_executable_6
:FOR_END_find_executable_6
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %47
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-64
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strlen
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-80
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strlen
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
# FOR_initialization_find_executable_8
LOAD_BASE_ADDRESS_rax %-56
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
:FOR_find_executable_8
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-80
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETL
MOVEZX
TEST
JUMP_EQ %FOR_END_find_executable_8
JUMP %FOR_THEN_find_executable_8
:FOR_ITER_find_executable_8
LOAD_BASE_ADDRESS_rax %-56
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %FOR_find_executable_8
:FOR_THEN_find_executable_8
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETG
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_find_executable_9
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
STORE_CHAR
JUMP %FOR_ITER_find_executable_8
:FOR_END_find_executable_8
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strlen
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %4096
POP_RBX	# _common_recursion
CMP
SETL
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_find_executable_10
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_find_executable_11
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fopen
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_find_executable_12
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %ELSE_find_executable_12
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fclose
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_find_executable_12
:ELSE_find_executable_12
:_END_IF_find_executable_12
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-48
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %58
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_find_char
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_find_executable_4
:END_WHILE_find_executable_4
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
# Defining function list_to_array
:FUNCTION_list_to_array
# Defining local hold
PUSH_RAX	#hold
# Defining local n
PUSH_RAX	#n
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
# Defining local array
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %256
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %8
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#array
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_list_to_array_0
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
# Defining local element
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#element
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_list_to_array_1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
# Defining local index
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#index
# Defining local i
PUSH_RAX	#i
# Defining local value_length
PUSH_RAX	#value_length
# Defining local var_length
PUSH_RAX	#var_length
# Defining local offset
PUSH_RAX	#offset
:WHILE_list_to_array_2
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_list_to_array_2
# THEN_while_list_to_array_2
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
POP_RBX	# _common_recursion
SAL_rax_Immediate8 !3
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
POP_RBX	# _common_recursion
SAL_rax_Immediate8 !3
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_list_to_array_3
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %256
POP_RBX	# _common_recursion
CMP
SETL
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_list_to_array_4
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
# IF_list_to_array_5
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_list_to_array_5
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
POP_RBX	# _common_recursion
SAL_rax_Immediate8 !3
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_list_to_array_5
:ELSE_list_to_array_5
LOAD_BASE_ADDRESS_rax %-80
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strlen
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
# FOR_initialization_list_to_array_6
LOAD_BASE_ADDRESS_rax %-64
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
:FOR_list_to_array_6
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-80
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETL
MOVEZX
TEST
JUMP_EQ %FOR_END_list_to_array_6
JUMP %FOR_THEN_list_to_array_6
:FOR_ITER_list_to_array_6
LOAD_BASE_ADDRESS_rax %-64
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %FOR_list_to_array_6
:FOR_THEN_list_to_array_6
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
STORE_CHAR
JUMP %FOR_ITER_list_to_array_6
:FOR_END_list_to_array_6
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %61
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-64
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-88
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-72
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strlen
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
# FOR_initialization_list_to_array_7
LOAD_BASE_ADDRESS_rax %-64
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
:FOR_list_to_array_7
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETL
MOVEZX
TEST
JUMP_EQ %FOR_END_list_to_array_7
JUMP %FOR_THEN_list_to_array_7
:FOR_ITER_list_to_array_7
LOAD_BASE_ADDRESS_rax %-64
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %FOR_list_to_array_7
:FOR_THEN_list_to_array_7
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-88
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
STORE_CHAR
JUMP %FOR_ITER_list_to_array_7
:FOR_END_list_to_array_7
:_END_IF_list_to_array_5
# IF_list_to_array_8
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_list_to_array_9
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
XOR_rbx_rax_into_rax
TEST
JUMP_EQ %ELSE_list_to_array_8
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
POP_RBX	# _common_recursion
SAL_rax_Immediate8 !3
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strcpy
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_list_to_array_8
:ELSE_list_to_array_8
:_END_IF_list_to_array_8
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-56
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
# FOR_initialization_list_to_array_10
LOAD_BASE_ADDRESS_rax %-64
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
:FOR_list_to_array_10
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %4096
POP_RBX	# _common_recursion
CMP
SETL
MOVEZX
TEST
JUMP_EQ %FOR_END_list_to_array_10
JUMP %FOR_THEN_list_to_array_10
:FOR_ITER_list_to_array_10
LOAD_BASE_ADDRESS_rax %-64
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %FOR_list_to_array_10
:FOR_THEN_list_to_array_10
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_CHAR
JUMP %FOR_ITER_list_to_array_10
:FOR_END_list_to_array_10
JUMP %WHILE_list_to_array_2
:END_WHILE_list_to_array_2
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
# Defining function handle_escape
:FUNCTION_handle_escape
# IF_handle_escape_0
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %10
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_handle_escape_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
RETURN
JUMP %_END_IF_handle_escape_0
:ELSE_handle_escape_0
# IF_handle_escape_1
LOAD_IMMEDIATE_rax %110
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_handle_escape_1
LOAD_IMMEDIATE_rax %10
RETURN
JUMP %_END_IF_handle_escape_1
:ELSE_handle_escape_1
# IF_handle_escape_2
LOAD_IMMEDIATE_rax %114
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_handle_escape_2
LOAD_IMMEDIATE_rax %13
RETURN
JUMP %_END_IF_handle_escape_2
:ELSE_handle_escape_2
# IF_handle_escape_3
LOAD_IMMEDIATE_rax %92
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_handle_escape_3
LOAD_IMMEDIATE_rax %92
RETURN
JUMP %_END_IF_handle_escape_3
:ELSE_handle_escape_3
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
RETURN
:_END_IF_handle_escape_3
:_END_IF_handle_escape_2
:_END_IF_handle_escape_1
:_END_IF_handle_escape_0
RETURN
# Defining function collect_comment
:FUNCTION_collect_comment
# Defining local c
PUSH_RAX	#c
:DO_collect_comment_0
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fgetc
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %0xFFFFFFFF
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_collect_comment_1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
:DO_TEST_collect_comment_0
LOAD_IMMEDIATE_rax %10
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_NE %DO_collect_comment_0
:DO_END_collect_comment_0
POP_RBX	# _recursive_statement_locals
RETURN
# Defining function collect_string
:FUNCTION_collect_string
# Defining local string_done
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#string_done
# Defining local c
PUSH_RAX	#c
# Defining local cc
PUSH_RAX	#cc
:DO_collect_string_0
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETG
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_collect_string_1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_BASE_ADDRESS_rax %-48
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fgetc
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %0xFFFFFFFF
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_collect_string_2
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
# IF_collect_string_3
LOAD_IMMEDIATE_rax %92
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_collect_string_3
LOAD_BASE_ADDRESS_rax %-48
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fgetc
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-56
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_handle_escape
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_collect_string_3
:ELSE_collect_string_3
# IF_collect_string_4
LOAD_IMMEDIATE_rax %34
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_collect_string_4
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_collect_string_4
:ELSE_collect_string_4
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
:_END_IF_collect_string_4
:_END_IF_collect_string_3
:DO_TEST_collect_string_0
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_NE %DO_collect_string_0
:DO_END_collect_string_0
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
# Defining function collect_token
:FUNCTION_collect_token
# Defining local c
PUSH_RAX	#c
# Defining local cc
PUSH_RAX	#cc
# Defining local token_done
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#token_done
# Defining local token
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#token
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_collect_token_0
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
# Defining local index
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#index
:DO_collect_token_1
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fgetc
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETG
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_collect_token_2
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
# IF_collect_token_3
LOAD_IMMEDIATE_rax %0xFFFFFFFF
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_collect_token_3
LOAD_BASE_ADDRESS_rax %-56
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax &GLOBAL_command_done
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_collect_token_3
:ELSE_collect_token_3
# IF_collect_token_4
LOAD_IMMEDIATE_rax %32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %9
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
POP_RBX	# _common_recursion
OR_rax_rbx
TEST
JUMP_EQ %ELSE_collect_token_4
LOAD_BASE_ADDRESS_rax %-56
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_collect_token_4
:ELSE_collect_token_4
# IF_collect_token_5
LOAD_IMMEDIATE_rax %10
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_collect_token_5
LOAD_IMMEDIATE_rax &GLOBAL_command_done
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-56
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_collect_token_6
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_collect_token_6
LOAD_BASE_ADDRESS_rax %-72
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_collect_token_6
:ELSE_collect_token_6
:_END_IF_collect_token_6
JUMP %_END_IF_collect_token_5
:ELSE_collect_token_5
# IF_collect_token_7
LOAD_IMMEDIATE_rax %34
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_collect_token_7
LOAD_BASE_ADDRESS_rax %-72
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_process_expression2
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_collect_string
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-56
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_collect_token_7
:ELSE_collect_token_7
# IF_collect_token_8
LOAD_IMMEDIATE_rax %35
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_collect_token_8
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_collect_comment
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_IMMEDIATE_rax &GLOBAL_command_done
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-56
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_collect_token_9
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_collect_token_9
LOAD_BASE_ADDRESS_rax %-72
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_collect_token_9
:ELSE_collect_token_9
:_END_IF_collect_token_9
JUMP %_END_IF_collect_token_8
:ELSE_collect_token_8
# IF_collect_token_10
LOAD_IMMEDIATE_rax %92
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_collect_token_10
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fgetc
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-48
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_handle_escape
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_collect_token_11
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %ELSE_collect_token_11
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_CHAR
JUMP %_END_IF_collect_token_11
:ELSE_collect_token_11
:_END_IF_collect_token_11
LOAD_BASE_ADDRESS_rax %-72
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_collect_token_10
:ELSE_collect_token_10
# IF_collect_token_12
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_collect_token_12
LOAD_BASE_ADDRESS_rax %-56
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_collect_token_12
:ELSE_collect_token_12
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-72
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
:_END_IF_collect_token_12
:_END_IF_collect_token_10
:_END_IF_collect_token_8
:_END_IF_collect_token_7
:_END_IF_collect_token_5
:_END_IF_collect_token_4
:_END_IF_collect_token_3
:DO_TEST_collect_token_1
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_NE %DO_collect_token_1
:DO_END_collect_token_1
LOAD_BASE_ADDRESS_rax %-72
LOAD_INTEGER
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
# Defining function is_envar
:FUNCTION_is_envar
# Defining local i
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#i
# Defining local token_length
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strlen
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#token_length
:WHILE_is_envar_0
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETL
MOVEZX
TEST
JUMP_EQ %END_WHILE_is_envar_0
# THEN_while_is_envar_0
# IF_is_envar_1
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %61
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_is_envar_1
LOAD_IMMEDIATE_rax %1
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_is_envar_1
:ELSE_is_envar_1
:_END_IF_is_envar_1
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_is_envar_0
:END_WHILE_is_envar_0
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
# Defining function add_envar
:FUNCTION_add_envar
# Defining local name
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strlen
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %4
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#name
# Defining local value
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#value
# Defining local newvalue
PUSH_RAX	#newvalue
# Defining local i
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#i
:WHILE_add_envar_0
LOAD_IMMEDIATE_rax %61
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_add_envar_0
# THEN_while_add_envar_0
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_add_envar_0
:END_WHILE_add_envar_0
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %2
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_add_envar_1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
:WHILE_add_envar_2
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_add_envar_2
# THEN_while_add_envar_2
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_add_envar_2
:END_WHILE_add_envar_2
# IF_add_envar_3
LOAD_IMMEDIATE_rax &GLOBAL_env
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_add_envar_3
LOAD_IMMEDIATE_rax &GLOBAL_env
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %24
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_env
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_add_envar_4
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_IMMEDIATE_rax &GLOBAL_env
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_add_envar_3
:ELSE_add_envar_3
:_END_IF_add_envar_3
# IF_add_envar_5
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_add_envar_6
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
TEST
JUMP_EQ %ELSE_add_envar_5
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_PATH
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strcpy
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_add_envar_5
:ELSE_add_envar_5
:_END_IF_add_envar_5
# Defining local n
LOAD_IMMEDIATE_rax &GLOBAL_env
LOAD_INTEGER
PUSH_RAX	#n
:WHILE_add_envar_7
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
XOR_rbx_rax_into_rax
TEST
JUMP_EQ %END_WHILE_add_envar_7
# THEN_while_add_envar_7
# IF_add_envar_8
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_add_envar_8
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %24
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_add_envar_9
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_add_envar_8
:ELSE_add_envar_8
:_END_IF_add_envar_8
LOAD_BASE_ADDRESS_rax %-48
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_add_envar_7
:END_WHILE_add_envar_7
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
# looking up offset
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
POP_RBX	# _recursive_statement_locals
POP_RBX	# _recursive_statement_locals
POP_RBX	# _recursive_statement_locals
POP_RBX	# _recursive_statement_locals
POP_RBX	# _recursive_statement_locals
RETURN
# Defining function cd
:FUNCTION_cd
# IF_cd_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_cd_0
LOAD_IMMEDIATE_rax %1
RETURN
JUMP %_END_IF_cd_0
:ELSE_cd_0
:_END_IF_cd_0
LOAD_IMMEDIATE_rax &GLOBAL_token
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_cd_1
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_cd_1
LOAD_IMMEDIATE_rax %1
RETURN
JUMP %_END_IF_cd_1
:ELSE_cd_1
:_END_IF_cd_1
# Defining local ret
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_chdir
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#ret
# IF_cd_2
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETG
MOVEZX
TEST
JUMP_EQ %ELSE_cd_2
LOAD_IMMEDIATE_rax %1
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_cd_2
:ELSE_cd_2
:_END_IF_cd_2
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
RETURN
# Defining function pwd
:FUNCTION_pwd
# Defining local path
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#path
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_pwd_0
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_getcwd
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_pwd_1
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
XOR_rbx_rax_into_rax
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_pwd_2
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_pwd_3
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
RETURN
# Defining function set
:FUNCTION_set
# Defining local i
PUSH_RAX	#i
# IF_set_0
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_set_0
JUMP %cleanup_set
JUMP %_END_IF_set_0
:ELSE_set_0
:_END_IF_set_0
LOAD_IMMEDIATE_rax &GLOBAL_token
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_set_1
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_set_1
JUMP %cleanup_set
JUMP %_END_IF_set_1
:ELSE_set_1
:_END_IF_set_1
# Defining local options
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#options
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_set_2
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
# Defining local last_position
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strlen
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
PUSH_RAX	#last_position
# FOR_initialization_set_3
LOAD_BASE_ADDRESS_rax %-16
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
:FOR_set_3
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETL
MOVEZX
TEST
JUMP_EQ %FOR_END_set_3
JUMP %FOR_THEN_set_3
:FOR_ITER_set_3
LOAD_BASE_ADDRESS_rax %-16
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %FOR_set_3
:FOR_THEN_set_3
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
STORE_CHAR
JUMP %FOR_ITER_set_3
:FOR_END_set_3
# Defining local options_length
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strlen
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#options_length
# FOR_initialization_set_4
LOAD_BASE_ADDRESS_rax %-16
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
:FOR_set_4
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETL
MOVEZX
TEST
JUMP_EQ %FOR_END_set_4
JUMP %FOR_THEN_set_4
:FOR_ITER_set_4
LOAD_BASE_ADDRESS_rax %-16
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %FOR_set_4
:FOR_THEN_set_4
# IF_set_5
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %97
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_set_5
# IF_set_6
LOAD_IMMEDIATE_rax &GLOBAL_WARNINGS
LOAD_INTEGER
TEST
JUMP_EQ %ELSE_set_6
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_set_7
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_set_6
:ELSE_set_6
:_END_IF_set_6
JUMP %FOR_ITER_set_4
JUMP %_END_IF_set_5
:ELSE_set_5
# IF_set_8
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %101
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_set_8
LOAD_IMMEDIATE_rax &GLOBAL_STRICT
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_set_8
:ELSE_set_8
# IF_set_9
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %120
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_set_9
LOAD_IMMEDIATE_rax &GLOBAL_VERBOSE
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_set_10
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_set_11
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fflush
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_set_9
:ELSE_set_9
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stderr
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_set_12
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stderr
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_exit
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
:_END_IF_set_9
:_END_IF_set_8
:_END_IF_set_5
JUMP %FOR_ITER_set_4
:FOR_END_set_4
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
:cleanup_set	#C goto label
LOAD_IMMEDIATE_rax %1
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
# Defining function echo
:FUNCTION_echo
# IF_echo_0
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_echo_0
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_echo_1
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
RETURN
JUMP %_END_IF_echo_0
:ELSE_echo_0
:_END_IF_echo_0
# IF_echo_2
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_echo_2
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_echo_3
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
RETURN
JUMP %_END_IF_echo_2
:ELSE_echo_2
:_END_IF_echo_2
LOAD_IMMEDIATE_rax &GLOBAL_token
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
:WHILE_echo_4
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_echo_4
# THEN_while_echo_4
# IF_echo_5
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_echo_5
JUMP %END_WHILE_echo_4
JUMP %_END_IF_echo_5
:ELSE_echo_5
:_END_IF_echo_5
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_IMMEDIATE_rax &GLOBAL_token
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_echo_4
:END_WHILE_echo_4
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_echo_6
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
RETURN
# Defining function unset
:FUNCTION_unset
# Defining local e
PUSH_RAX	#e
# Defining local t
PUSH_RAX	#t
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
:WHILE_unset_0
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_unset_0
# THEN_while_unset_0
LOAD_BASE_ADDRESS_rax %-16
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL_env
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
:WHILE_unset_1
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_unset_1
# THEN_while_unset_1
# IF_unset_2
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_unset_2
JUMP %END_WHILE_unset_1
JUMP %_END_IF_unset_2
:ELSE_unset_2
:_END_IF_unset_2
# IF_unset_3
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
TEST
JUMP_EQ %ELSE_unset_3
JUMP %END_WHILE_unset_1
JUMP %_END_IF_unset_3
:ELSE_unset_3
:_END_IF_unset_3
LOAD_BASE_ADDRESS_rax %-16
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_unset_1
:END_WHILE_unset_1
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_unset_4
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_unset_4
JUMP %WHILE_unset_0
JUMP %_END_IF_unset_4
:ELSE_unset_4
:_END_IF_unset_4
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_unset_0
:END_WHILE_unset_0
POP_RBX	# _recursive_statement_locals
POP_RBX	# _recursive_statement_locals
RETURN
# Defining function execute
:FUNCTION_execute
# Defining local rc
PUSH_RAX	#rc
# IF_execute_0
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_is_envar
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_execute_0
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_add_envar
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_execute_0
:ELSE_execute_0
# IF_execute_1
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_execute_2
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
TEST
JUMP_EQ %ELSE_execute_1
LOAD_BASE_ADDRESS_rax %-16
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_cd
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_execute_3
LOAD_IMMEDIATE_rax &GLOBAL_STRICT
LOAD_INTEGER
TEST
JUMP_EQ %ELSE_execute_3
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_execute_4
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_execute_3
:ELSE_execute_3
:_END_IF_execute_3
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_execute_1
:ELSE_execute_1
# IF_execute_5
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_execute_6
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
TEST
JUMP_EQ %ELSE_execute_5
LOAD_BASE_ADDRESS_rax %-16
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_set
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_execute_7
LOAD_IMMEDIATE_rax &GLOBAL_STRICT
LOAD_INTEGER
TEST
JUMP_EQ %ELSE_execute_7
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_execute_8
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_execute_7
:ELSE_execute_7
:_END_IF_execute_7
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_execute_5
:ELSE_execute_5
# IF_execute_9
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_execute_10
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
TEST
JUMP_EQ %ELSE_execute_9
LOAD_BASE_ADDRESS_rax %-16
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_pwd
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_execute_11
LOAD_IMMEDIATE_rax &GLOBAL_STRICT
LOAD_INTEGER
TEST
JUMP_EQ %ELSE_execute_11
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_execute_12
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_execute_11
:ELSE_execute_11
:_END_IF_execute_11
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_execute_9
:ELSE_execute_9
# IF_execute_13
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_execute_14
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
TEST
JUMP_EQ %ELSE_execute_13
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_echo
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_execute_13
:ELSE_execute_13
# IF_execute_15
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_execute_16
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
TEST
JUMP_EQ %ELSE_execute_15
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_unset
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_execute_15
:ELSE_execute_15
:_END_IF_execute_15
:_END_IF_execute_13
:_END_IF_execute_9
:_END_IF_execute_5
:_END_IF_execute_1
:_END_IF_execute_0
# Defining local status
PUSH_RAX	#status
# Defining local array
PUSH_RAX	#array
# Defining local envp
PUSH_RAX	#envp
# Defining local program
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_find_executable
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#program
# IF_execute_17
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_execute_17
# IF_execute_18
LOAD_IMMEDIATE_rax &GLOBAL_STRICT
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_execute_18
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_execute_19
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stderr
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stderr
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_execute_20
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stderr
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_exit
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_execute_18
:ELSE_execute_18
:_END_IF_execute_18
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_execute_17
:ELSE_execute_17
:_END_IF_execute_17
# Defining local f
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fork
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#f
# IF_execute_21
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
SUBTRACT_rax_from_rbx_into_rbx
MOVE_rbx_to_rax
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_execute_21
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_execute_22
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stderr
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stderr
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_execute_23
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stderr
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_exit
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_execute_21
:ELSE_execute_21
# IF_execute_24
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_execute_24
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_list_to_array
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_env
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_list_to_array
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_execute_25
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL_FUZZING
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_execute_25
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_process_expression2
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_execve
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_execute_25
:ELSE_execute_25
:_END_IF_execute_25
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION__exit
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_execute_24
:ELSE_execute_24
:_END_IF_execute_24
:_END_IF_execute_21
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_process_expression2
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_waitpid
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
# Defining function collect_command
:FUNCTION_collect_command
LOAD_IMMEDIATE_rax &GLOBAL_command_done
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
# Defining local n
PUSH_RAX	#n
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %24
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_collect_command_0
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
# Defining local s
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#s
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_collect_command_1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_IMMEDIATE_rax &GLOBAL_token
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
# Defining local index
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#index
:WHILE_collect_command_2
LOAD_IMMEDIATE_rax &GLOBAL_command_done
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %END_WHILE_collect_command_2
# THEN_while_collect_command_2
LOAD_BASE_ADDRESS_rax %-48
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_process_expression2
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_collect_token
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_collect_command_3
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_collect_command_4
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
TEST
JUMP_EQ %ELSE_collect_command_3
JUMP %WHILE_collect_command_2
JUMP %_END_IF_collect_command_3
:ELSE_collect_command_3
:_END_IF_collect_command_3
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
# looking up offset
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_collect_command_5
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_handle_variables
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
# IF_collect_command_6
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_collect_command_7
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
TEST
JUMP_EQ %ELSE_collect_command_6
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
# looking up offset
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_collect_command_2
JUMP %_END_IF_collect_command_6
:ELSE_collect_command_6
:_END_IF_collect_command_6
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %24
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_collect_command_8
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_collect_command_2
:END_WHILE_collect_command_2
# IF_collect_command_9
LOAD_IMMEDIATE_rax %0xFFFFFFFF
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_collect_command_9
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
JUMP %_END_IF_collect_command_9
:ELSE_collect_command_9
:_END_IF_collect_command_9
# IF_collect_command_10
LOAD_IMMEDIATE_rax &GLOBAL_VERBOSE
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_collect_command_11
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
XOR_rbx_rax_into_rax
POP_RBX	# _common_recursion
AND_rax_rbx
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
XOR_rbx_rax_into_rax
POP_RBX	# _common_recursion
AND_rax_rbx
TEST
JUMP_EQ %ELSE_collect_command_10
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_collect_command_12
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
:WHILE_collect_command_13
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_collect_command_13
# THEN_while_collect_command_13
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_collect_command_14
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
# IF_collect_command_15
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %ELSE_collect_command_15
# IF_collect_command_16
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_collect_command_17
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
XOR_rbx_rax_into_rax
TEST
JUMP_EQ %ELSE_collect_command_16
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_collect_command_16
:ELSE_collect_command_16
:_END_IF_collect_command_16
JUMP %_END_IF_collect_command_15
:ELSE_collect_command_15
:_END_IF_collect_command_15
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_collect_command_13
:END_WHILE_collect_command_13
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %10
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fflush
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_collect_command_10
:ELSE_collect_command_10
:_END_IF_collect_command_10
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN
# Defining function run_script
:FUNCTION_run_script
# Defining local index
PUSH_RAX	#index
# Defining local status
PUSH_RAX	#status
:WHILE_run_script_0
LOAD_IMMEDIATE_rax %1
TEST
JUMP_EQ %END_WHILE_run_script_0
# THEN_while_run_script_0
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_collect_command
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_run_script_1
LOAD_IMMEDIATE_rax %0xFFFFFFFF
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_run_script_1
JUMP %END_WHILE_run_script_0
JUMP %_END_IF_run_script_1
:ELSE_run_script_1
:_END_IF_run_script_1
# IF_run_script_2
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_run_script_2
JUMP %WHILE_run_script_0
JUMP %_END_IF_run_script_2
:ELSE_run_script_2
:_END_IF_run_script_2
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_execute
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_run_script_3
LOAD_IMMEDIATE_rax &GLOBAL_STRICT
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
POP_RBX	# _common_recursion
AND_rax_rbx
TEST
JUMP_EQ %ELSE_run_script_3
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_run_script_4
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stderr
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %10
PUSH_RAX	#_process_expression2
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_int2str
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stderr
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_run_script_5
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stderr
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_exit
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_run_script_3
:ELSE_run_script_3
:_END_IF_run_script_3
JUMP %WHILE_run_script_0
:END_WHILE_run_script_0
POP_RBX	# _recursive_statement_locals
POP_RBX	# _recursive_statement_locals
RETURN
# Defining function populate_env
:FUNCTION_populate_env
LOAD_IMMEDIATE_rax &GLOBAL_env
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %24
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_env
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_populate_env_0
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
# Defining local n
PUSH_RAX	#n
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL_env
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
# Defining local i
PUSH_RAX	#i
# Defining local j
PUSH_RAX	#j
# Defining local k
PUSH_RAX	#k
# Defining local envp_line
PUSH_RAX	#envp_line
# FOR_initialization_populate_env_1
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
:FOR_populate_env_1
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_array_length
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
CMP
SETL
MOVEZX
TEST
JUMP_EQ %FOR_END_populate_env_1
JUMP %FOR_THEN_populate_env_1
:FOR_ITER_populate_env_1
LOAD_BASE_ADDRESS_rax %-32
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %FOR_populate_env_1
:FOR_THEN_populate_env_1
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_populate_env_2
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
# looking up offset
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_populate_env_3
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-56
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_populate_env_4
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-32
LOAD_INTEGER
POP_RBX	# _common_recursion
SAL_rax_Immediate8 !3
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strcpy
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
:WHILE_populate_env_5
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %61
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_populate_env_5
# THEN_while_populate_env_5
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_populate_env_5
:END_WHILE_populate_env_5
# IF_populate_env_6
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_populate_env_6
JUMP %FOR_ITER_populate_env_1
JUMP %_END_IF_populate_env_6
:ELSE_populate_env_6
:_END_IF_populate_env_6
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-48
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
:WHILE_populate_env_7
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_populate_env_7
# THEN_while_populate_env_7
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
POP_RBX	# _common_recursion
ADD_rbx_to_rax
LOAD_BYTE
POP_RBX	# _common_recursion
STORE_CHAR
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-48
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_populate_env_7
:END_WHILE_populate_env_7
# IF_populate_env_8
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
# looking up offset
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_populate_env_8
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
# looking up offset
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &STRING_populate_env_9
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_populate_env_8
:ELSE_populate_env_8
:_END_IF_populate_env_8
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %24
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_populate_env_10
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %FOR_ITER_populate_env_1
:FOR_END_populate_env_1
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL_env
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
:WHILE_populate_env_11
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %8
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %END_WHILE_populate_env_11
# THEN_while_populate_env_11
LOAD_BASE_ADDRESS_rax %-24
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %WHILE_populate_env_11
:END_WHILE_populate_env_11
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
# looking up offset
# -> offset calculation
LOAD_IMMEDIATE_rbx %16
ADD_rbx_to_rax
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
POP_RBX	# _recursive_statement_locals
POP_RBX	# _recursive_statement_locals
POP_RBX	# _recursive_statement_locals
POP_RBX	# _recursive_statement_locals
POP_RBX	# _recursive_statement_locals
RETURN
# Defining function main
:FUNCTION_main
LOAD_IMMEDIATE_rax &GLOBAL_VERBOSE
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax &GLOBAL_STRICT
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax &GLOBAL_FUZZING
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax &GLOBAL_WARNINGS
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
STORE_INTEGER
# Defining local filename
LOAD_IMMEDIATE_rax &STRING_main_0
PUSH_RAX	#filename
# Defining local script
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#script
LOAD_IMMEDIATE_rax &GLOBAL_token
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %24
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_token
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_main_1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
# Defining local i
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#i
:WHILE_main_2
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-8
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETLE
MOVEZX
TEST
JUMP_EQ %END_WHILE_main_2
# THEN_while_main_2
# IF_main_3
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
POP_RBX	# _common_recursion
SAL_rax_Immediate8 !3
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_main_3
LOAD_BASE_ADDRESS_rax %-56
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_main_3
:ELSE_main_3
# IF_main_4
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
POP_RBX	# _common_recursion
SAL_rax_Immediate8 !3
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_main_5
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
POP_RBX	# _common_recursion
SAL_rax_Immediate8 !3
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_main_6
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
OR_rax_rbx
TEST
JUMP_EQ %ELSE_main_4
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_main_7
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
SAL_rax_Immediate8 !3
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_main_8
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_exit
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_main_4
:ELSE_main_4
# IF_main_9
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
POP_RBX	# _common_recursion
SAL_rax_Immediate8 !3
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_main_10
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
POP_RBX	# _common_recursion
SAL_rax_Immediate8 !3
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_main_11
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_match
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
OR_rax_rbx
TEST
JUMP_EQ %ELSE_main_9
# IF_main_12
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
SAL_rax_Immediate8 !3
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
TEST
JUMP_EQ %ELSE_main_12
LOAD_BASE_ADDRESS_rax %-40
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %1
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
SAL_rax_Immediate8 !3
ADD_rbx_to_rax
LOAD_INTEGER
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_main_12
:ELSE_main_12
:_END_IF_main_12
LOAD_BASE_ADDRESS_rax %-56
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %2
POP_RBX	# _common_recursion
ADD_rbx_to_rax
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-56
LOAD_INTEGER
POP_RBX	# _common_recursion
SAL_rax_Immediate8 !3
ADD_rbx_to_rax
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_main_13
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stdout
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_exit
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_main_9
:ELSE_main_9
:_END_IF_main_9
:_END_IF_main_4
:_END_IF_main_3
JUMP %WHILE_main_2
:END_WHILE_main_2
# IF_main_14
LOAD_IMMEDIATE_rax &GLOBAL_INIT_MODE
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_main_14
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-24
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_populate_env
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_main_14
:ELSE_main_14
:_END_IF_main_14
LOAD_IMMEDIATE_rax &GLOBAL_PATH
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_main_15
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_env_lookup
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
# Defining local USERNAME
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_main_16
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_env_lookup
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RAX	#USERNAME
# IF_main_17
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL_PATH
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
POP_RBX	# _common_recursion
AND_rax_rbx
TEST
JUMP_EQ %ELSE_main_17
LOAD_IMMEDIATE_rax &GLOBAL_PATH
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_PATH
LOAD_INTEGER
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax %0
POP_RBX	# _common_recursion
CMP
SETNE
MOVEZX
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_main_18
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_require
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_PATH
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_main_19
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strcpy
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_main_17
:ELSE_main_17
# IF_main_20
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_IMMEDIATE_rax &GLOBAL_PATH
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_main_20
LOAD_IMMEDIATE_rax &GLOBAL_PATH
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %4096
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_calloc
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax &GLOBAL_PATH
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_PATH
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_main_21
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strcat
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax &GLOBAL_PATH
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_PATH
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-64
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strcat
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
LOAD_IMMEDIATE_rax &GLOBAL_PATH
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &GLOBAL_PATH
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_main_22
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_strcat
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
JUMP %_END_IF_main_20
:ELSE_main_20
:_END_IF_main_20
:_END_IF_main_17
LOAD_BASE_ADDRESS_rax %-48
PUSH_RAX	#_common_recursion
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &STRING_main_23
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fopen
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
POP_RBX	# _common_recursion
STORE_INTEGER
# IF_main_24
LOAD_IMMEDIATE_rax %0
PUSH_RAX	#_common_recursion
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
POP_RBX	# _common_recursion
CMP
SETE
MOVEZX
TEST
JUMP_EQ %ELSE_main_24
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_main_25
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stderr
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-40
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stderr
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax &STRING_main_26
PUSH_RAX	#_process_expression1
LOAD_IMMEDIATE_rax &GLOBAL_stderr
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fputs
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_IMMEDIATE_rax %1
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_exit
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
JUMP %_END_IF_main_24
:ELSE_main_24
:_END_IF_main_24
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_process_expression1
LOAD_BASE_ADDRESS_rax %-16
LOAD_INTEGER
PUSH_RAX	#_process_expression2
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_run_script
POP_RBX	# _process_expression_locals
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
PUSH_RDI	# Prevent overwriting in recursion
PUSH_RBP	# Protect the old base pointer
COPY_RSP_to_RDI	# Copy new base pointer
LOAD_BASE_ADDRESS_rax %-48
LOAD_INTEGER
PUSH_RAX	#_process_expression1
COPY_rdi_to_rbp
CALL_IMMEDIATE %FUNCTION_fclose
POP_RBX	# _process_expression_locals
POP_RBP	# Restore old base pointer
POP_RDI	# Prevent overwrite
LOAD_IMMEDIATE_rax %0
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
POP_RBX	# _return_result_locals
RETURN

:ELF_data

# Program global variables
:GLOBAL__malloc_ptr
NULL
:GLOBAL__brk_ptr
NULL
:GLOBAL_stdin
NULL
:GLOBAL_stdout
NULL
:GLOBAL_stderr
NULL
:GLOBAL___list
NULL
:GLOBAL_command_done
NULL
:GLOBAL_VERBOSE
NULL
:GLOBAL_STRICT
NULL
:GLOBAL_INIT_MODE
NULL
:GLOBAL_FUZZING
NULL
:GLOBAL_WARNINGS
NULL
:GLOBAL_PATH
NULL
:GLOBAL_token
NULL
:GLOBAL_env
NULL

# Program strings
:STRING___toupper_1
"abcdefghijklmnopqrstuvwxyz"
:STRING_strtoint_2
"01"
:STRING_strtoint_4
"0123456789ABCDEFabcdef"
:STRING_strtoint_6
"01234567"
:STRING_strtoint_7
"0123456789"
:STRING_int2str_0
"int2str doesn't support a base less than 2
"
:STRING_int2str_1
"int2str doesn't support a base more than 36
"
:STRING_int2str_3
"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
:STRING_int2str_6
"-2147483648"
:STRING_variable_substitute_ifset_3
"Memory initialization of var_name in variable_substitute_ifset failed
"
:STRING_variable_substitute_ifset_5
"Memory initialization of text in variable_substitute_ifset failed
"
:STRING_variable_substitute_ifset_7
"IMPROPERLY TERMINATED VARIABLE
ABORTING HARD
"
:STRING_variable_substitute_1
"Memory initialization of var_name in variable_substitute failed
"
:STRING_variable_substitute_3
"LINE IS TOO LONG
ABORTING HARD
"
:STRING_variable_substitute_5
"IMPROPERLY TERMINATED VARIABLE!
ABORTING HARD
"
:STRING_variable_all_1
"--"
:STRING_variable_all_2
"-f"
:STRING_variable_all_3
"--file"
:STRING_variable_all_6
"-f"
:STRING_variable_all_7
"--file"
:STRING_handle_variables_0
"Memory initialization of input in collect_variable failed
"
:STRING_handle_variables_1
"Memory initialization of n->value in collect_variable failed
"
:STRING_handle_variables_6
"IMPROPERLY USED VARIABLE!
Only ${foo} and $@ format are accepted at this time.
ABORTING HARD
"
:STRING_find_executable_1
""
:STRING_find_executable_3
"Memory initialization of MPATH in find_executable failed
"
:STRING_find_executable_7
"Element of PATH is too long
"
:STRING_find_executable_9
"Element of PATH is too long
"
:STRING_find_executable_10
"COMMAND TOO LONG!
ABORTING HARD
"
:STRING_find_executable_11
"r"
:STRING_list_to_array_0
"Memory initialization of array in conversion of list to array failed
"
:STRING_list_to_array_1
"Memory initialization of element in conversion of list to array failed
"
:STRING_list_to_array_3
"Memory initialization of array[index] in conversion of list to array failed
"
:STRING_list_to_array_4
"SCRIPT TOO LONG or TOO MANY ENVARS
ABORTING HARD
"
:STRING_list_to_array_9
""
:STRING_collect_comment_1
"IMPROPERLY TERMINATED LINE COMMENT!
ABORTING HARD
"
:STRING_collect_string_1
"LINE IS TOO LONG
ABORTING HARD
"
:STRING_collect_string_2
"IMPROPERLY TERMINATED STRING!
ABORTING HARD
"
:STRING_collect_token_0
"Memory initialization of token in collect_token failed
"
:STRING_collect_token_2
"LINE IS TOO LONG
ABORTING HARD
"
:STRING_add_envar_1
"add_envar recieved improper variable
"
:STRING_add_envar_4
"Memory initialization of env failed
"
:STRING_add_envar_6
"PATH"
:STRING_add_envar_9
"Memory initialization of next env node in add_envar failed
"
:STRING_pwd_0
"Memory initialization of path in pwd failed
"
:STRING_pwd_1
""
:STRING_pwd_2
"getcwd() failed
"
:STRING_pwd_3
"
"
:STRING_set_2
"Memory initialization of options in set failed
"
:STRING_set_7
"set -a is on by default and cannot be disabled
"
:STRING_set_10
" +> set -"
:STRING_set_11
"
"
:STRING_set_12
" is an invalid set option!
"
:STRING_echo_1
"
"
:STRING_echo_3
"
"
:STRING_echo_6
"
"
:STRING_execute_2
"cd"
:STRING_execute_4
"cd failed!
"
:STRING_execute_6
"set"
:STRING_execute_8
"set failed!
"
:STRING_execute_10
"pwd"
:STRING_execute_12
"pwd failed!
"
:STRING_execute_14
"echo"
:STRING_execute_16
"unset"
:STRING_execute_19
"WHILE EXECUTING "
:STRING_execute_20
" NOT FOUND!
ABORTING HARD
"
:STRING_execute_22
"WHILE EXECUTING "
:STRING_execute_23
"fork() FAILED
ABORTING HARD
"
:STRING_collect_command_0
"Memory initialization of token in collect_command failed
"
:STRING_collect_command_1
"Memory initialization of token in collect_command failed
"
:STRING_collect_command_4
""
:STRING_collect_command_5
"Memory initialization of next token node in collect_command failed
"
:STRING_collect_command_7
" "
:STRING_collect_command_8
"Memory initialization of next token node in collect_command failed
"
:STRING_collect_command_11
""
:STRING_collect_command_12
" +>"
:STRING_collect_command_14
" "
:STRING_collect_command_17
""
:STRING_run_script_4
"Subprocess error "
:STRING_run_script_5
"
ABORTING HARD
"
:STRING_populate_env_0
"Memory initialization of env failed
"
:STRING_populate_env_2
"Memory initialization of n->var in population of env failed
"
:STRING_populate_env_3
"Memory initialization of n->var in population of env failed
"
:STRING_populate_env_4
"Memory initialization of envp_line in population of env failed
"
:STRING_populate_env_9
""
:STRING_populate_env_10
"Memory initialization of n->next in population of env failed
"
:STRING_main_0
"kaem.run"
:STRING_main_1
"Memory initialization of token failed
"
:STRING_main_5
"-h"
:STRING_main_6
"--help"
:STRING_main_7
"Usage: "
:STRING_main_8
" [-h | --help] [-V | --version] [--file filename | -f filename] [-i | --init-mode] [-v | --verbose] [--strict] [--warn] [--fuzz]
"
:STRING_main_10
"-f"
:STRING_main_11
"--file"
:STRING_main_13
"UNKNOWN ARGUMENT
"
:STRING_main_15
"PATH"
:STRING_main_16
"LOGNAME"
:STRING_main_18
"Memory initialization of PATH failed
"
:STRING_main_19
"/root/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
:STRING_main_21
"/home/"
:STRING_main_22
"/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games"
:STRING_main_23
"r"
:STRING_main_25
"The file: "
:STRING_main_26
" can not be opened!
"
